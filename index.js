const Discord = require('discord.js');
const client = new Discord.Client({
    intents: [
        Discord.Intents.FLAGS.GUILDS,
        Discord.Intents.FLAGS.GUILD_MESSAGES,
        Discord.Intents.FLAGS.DIRECT_MESSAGES,
        Discord.Intents.FLAGS.MESSAGE_CONTENT,
        Discord.Intents.FLAGS.GUILD_MESSAGE_REACTIONS,
        Discord.Intents.FLAGS.GUILD_VOICE_STATES,
        Discord.Intents.FLAGS.GUILD_MEMBERS,
        Discord.Intents.FLAGS.GUILD_PRESENCES,

    ]
});

client.login(process.env.TOKEN);
const prefix = (process.env.PREFIX);
const requiredEmployedRoleId = ("987820202198712449");

client.on("ready", () => {
    console.log(`‚úÖ Le Bot ${client.user.tag} est op√©rationnel ! ‚úÖ`)

    client.user.setPresence({
        status: 'online', //'online', 'idle', 'dnd' ou 'invisible'
        activities: [
          {
            name: 'ùê∫ùëÇùëÄùëàùëÜùê∂ùëà',
            type: 'STREAMING', //'PLAYING', 'STREAMING', 'LISTENING', 'WATCHING' ou 'COMPETING'
            url: 'https://discord.gg/T9fUEbsJrt', 
          },
        ],
      });
    });



//          .oooooo.         .oooooo.   ooooo   ooooo       .o.       ooooo      ooo ooooo      ooo oooooooooooo ooooo        
//         d'     `b        d8P'  `Y8b  `888'   `888'      .888.      `888b.     `8' `888b.     `8' `888'     `8 `888'        
//        d' .d"bd  8      888           888     888      .8"888.      8 `88b.    8   8 `88b.    8   888          888         
//        8  8. 8  .d      888           888ooooo888     .8' `888.     8   `88b.  8   8   `88b.  8   888oooo8     888         
//        Y.  YoP"b'       888           888     888    .88ooo8888.    8     `88b.8   8     `88b.8   888    "     888         
//         8.      .8      `88b    ooo   888     888   .8'     `888.   8       `888   8       `888   888       o  888       o 
//          YooooooP        `Y8bood8P'  o888o   o888o o88o     o8888o o8o        `8  o8o        `8  o888ooooood8 o888ooooood8 
                                                                                                                    
                                                                                                                    
                                                                                                                    
client.on('message', message => {
    if (message.content === prefix) {
      message.reply('Oui ?');
    }
  });

client.on('message', message => {
    if (message.author.bot) return;
    const greetings = ['salut', 'slt', 'bonjour', 'bjr', 'bonsoir', 'bsr', 'wesh', 'hey'];
  
    if (greetings.some(word => message.content.toLowerCase().includes(word))) {
      message.react('üëã');
    }
  });

client.on("messageCreate", async message => {
    if (message.author.bot) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/g);
    const command = args.shift().toLowerCase();

    if (message.content.startsWith(prefix)) {
        switch (command) {
            
            case 'discord':
            case 'Discord':
                message.reply("https://discord.gg/T9fUEbsJrt");
                break;
            case 'hey':
            case 'yo':
                message.reply("Salut √† toi !");
                break;
            case 're':
                message.reply("Ah te revoil√† !");
                break;
            case 'role':
            case 'roles':
            case 'r√¥le':
            case 'r√¥les':
                message.reply("Voici le salon des <#987820202752356375>");
                break;
            case 'departement':
            case 'departements':
            case 'd√©partement':
            case 'd√©partements':
                message.reply("Voici le salon des <#987835514591772722>");
                break;
            case 'discussion':
                message.reply("Voici le salon des <#987820203343761451>");
                break;
            case 'performance':
            case 'performances':
                message.reply("Voici le salon des <#987829100053925988>");
                break;
            case 'evolution':
            case 'evolutions':
            case '√©volution':
            case '√©volutions':
                message.reply("Voici le salon des <#990369064377532436>");
                break;
            case 'programme':
            case 'programmes':
                message.reply("Voici le salon des <#987829603462709278>");
                break;
            case 'alimentation':
                message.reply("Voici le salon des <#991696422745428018>");
                break;
            case 'playlist':
                message.reply("Voici le salon des <#988065218099822612>");
                break;
            case 'reseau':
            case 'reseaux':
            case 'r√©seau':
            case 'r√©seaux':
            case 'reseausociaux':
            case 'reseauxsociaux':
            case 'r√©seausociaux':
            case 'r√©seauxsociaux':
            case 'reseau sociaux':
            case 'reseaux sociaux':
            case 'r√©seau sociaux':
            case 'r√©seaux sociaux':
            case 'reseau-sociaux':
            case 'reseaux-sociaux':
            case 'r√©seau-sociaux':
            case 'r√©seaux-sociaux':
                message.reply("Voici le salon des <#990913515218927656>");
                break;
            case 'gymbro':
            case 'gym-bro':
            case 'gym bro':
                message.reply("Voici le salon des <#987842500997820477>");
                break;


                
//        ooooo   ooooo oooooooooooo ooooo        ooooooooo.     .o            o.   
//        `888'   `888' `888'     `8 `888'        `888   `Y88.  .8'            `8.  
//         888     888   888          888          888   .d88' .8'      88      `8. 
//         888ooooo888   888oooo8     888          888ooo88P'  88       88       88 
//         888     888   888    "     888          888         88   8888888888   88 
//         888     888   888       o  888       o  888         `8.      88      .8' 
//        o888o   o888o o888ooooood8 o888ooooood8 o888o         `8.     88     .8'   



            case 'aide':
            case 'help':
              
                    const embed = new Discord.MessageEmbed()
                        .setColor("BLUE")
                        .setFooter({ text: "Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà." })
                        .setImage("https://images-ext-2.discordapp.net/external/gXakbSDik9kWaj6hawV9rAI9bXb0G0IpVspJhvL96xw/https/www.zupimages.net/up/22/27/smao.png?width=1440&height=399")
                        .setThumbnail("https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png")
                        .setDescription(`

                        Le prefix de <@994859660727291985> est **sa mention**.
                        
                        
                        ${prefix}*[le salon que vous cherchez]*
                        Vous envoie bouton cliquable du salon demand√©.
                        
                        ${prefix}**quidu** *[num√©ro du d√©partement]*
                        Vous envoie le nom des personnes ayant le r√¥le.

                        ${prefix}**exerciceaide**
                        Vous envoie comment utiliser les commandes sur *exercice*.
                        
                        ${prefix}**exercice** 
                        Vous envoie un exercice au hasard parmi tous.

                        ${prefix}**exercice** *[groupe musculaire]*
                        Vous envoie un exercice au hasard parmi le groupe demand√© (liste de groupe : ${prefix}**exerciceaide**).

                        ${prefix}**exercice+**
                        Vous envoie 11 boutons pour afficher des exercices de mani√®re totalement al√©atoire ou au choix du groupe musculaire.
                        
                        ${prefix}**chatgpt** *[message]*
                        Vous r√©pond √† partir de chat GPT.
                        
                        ${prefix}**musique** *[lien YouTube]*
                        **(ACTUELLEMENT INDISPONIBLE)**

                        **autrespays**
                        Si aucun des r√¥les de d√©partements disponibles dans <#987820202752356375> vous conviennent, si vous n'√™tes pas de France, vous pouvez taper cette commande pour faire appara√Ætre un menu pour choisir d'autres pays.
                        `)
                        .setTitle("Liste des commandes GLOBALES");
                    message.reply({ embeds: [embed] });
                    break;
            case 'aide+':
            case 'help+':
    if (message.member.roles.cache.has(requiredEmployedRoleId)) {
        const embed = new Discord.MessageEmbed()
                        .setColor("RED")
                        .setFooter({ text: "Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà." })
                        .setImage("https://images-ext-2.discordapp.net/external/gXakbSDik9kWaj6hawV9rAI9bXb0G0IpVspJhvL96xw/https/www.zupimages.net/up/22/27/smao.png?width=1440&height=399")
                        .setThumbnail("https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png")
                        .setDescription(`

                        Le prefix de <@994859660727291985> est **sa mention**.
                        
                        ${prefix}**code**
                        Vous envoie le code du bot *${client.user.tag}*.
                        
                        ${prefix}**suppr** *[nombre de messages]*
                        Supprime le nombre de derniers messages demand√©.

                        ${prefix}**supprid** *[ID **premier** message]* *[ID **dernier** message]*
                        Supprime tous les messages entre les deux messages envoy√©s.
                        
                        ${prefix}**repete** *[message]*
                        Envoie un message avec le m√™me compte que celui que vous avez envoy√©.

                        ${prefix}**repete&suppr** *[message]*
                        Envoie un message avec le m√™me compte que celui que vous avez envoy√© et supprime le votre.

                        ${prefix}**invite** *[user_id]*
                        Envoie un message d'invitation √† la personne demand√©e.

                        ${prefix}**reinvite** *[user_id]*
                        Envoie un message de r√©-invitation √† la personne demand√©e.

                        ${prefix}**messageprive** *[user_id] [message]*
                        Envoie le message √† la personne mentionn√©e.
 
                        ${prefix}**mute** *[user_id] ou [user_mention] ([temps en min/h])*
                        Rend muet la personne demand√©e pendant le temps donn√©, ou ind√©finiment en cas contraire.
                         
                        ${prefix}**demute** *[user_id] ou [user_mention]*
                        Ne rend plus muet la personne demand√©e.

                        ${prefix}**embed**
                        Pour cr√©er un embed depuis Discord.
                        
                        ${prefix}**avertissement** *[user_mention]*
                        Ajoute un avertissement √† la personn√© mentionn√©e.

                        ${prefix}**avertissementretirer** *[user_mention]*
                        Retire un avertissement √† la personn√© mentionn√©e.

                        ${prefix}**avertissementinfo** *[user_mention]*
                        Envoie le nombre d'avertissement(s) de la personn√© mentionn√©e.

                        ${prefix}**quirole** *[role_mention]*
                        Envoie la liste des utilisateurs ayant le r√¥le mentionn√©

                        ${prefix}**quirole&** *[premier_role_mention]* *[deuxi√®me_role_mention]*
                        Envoie la liste des utilisateurs ayant les deux r√¥les mentionn√©s


                        `)
                        .setTitle("Liste des commandes EMPLOY√âS");
                    message.reply({ embeds: [embed] });
    } else {
        message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    } break;

                    
                };
        }
        


//        .oooooo..o ooooo     ooo ooooooooo.   ooooooooo.   ooooooooo.   
//        d8P'    `Y8 `888'     `8' `888   `Y88. `888   `Y88. `888   `Y88. 
//        Y88bo.       888       8   888   .d88'  888   .d88'  888   .d88' 
//         `"Y8888o.   888       8   888ooo88P'   888ooo88P'   888ooo88P'  
//             `"Y88b  888       8   888          888          888`88b.    
//        oo     .d8P  `88.    .8'   888          888          888  `88b.  
//        8""88888P'     `YbodP'    o888o        o888o        o888o  o888o 
                                                                         
                                                                         
                                                                         
switch (command) {

    case 'suppr':
if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
            return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
        }

        const deleteCount = parseInt(args[0], 10);
        if (!deleteCount || deleteCount < 1 || deleteCount > 100) {
            return message.reply("Veuillez fournir un nombre entre 1 et 100 pour le nombre de messages √† supprimer.");
        }

        message.channel.bulkDelete(deleteCount + 1)
            .then(() => {
                message.channel.send(`J'ai supprim√© ${deleteCount} message(s).`).then(msg => {
                    setTimeout(() => msg.delete(), 3000);
                });
            })
            .catch(error => {
                console.error(`Impossible de supprimer les messages en raison de: ${error}`);
                message.reply("Une erreur s'est produite lors de la suppression des messages.");
            });
        break;

        case 'supprid':
if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
        return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    const firstMessageId = args[0];
    const secondMessageId = args[1];

    if (!firstMessageId || !secondMessageId) {
        return message.reply("Veuillez fournir deux ID de messages valides.");
    }

    message.channel.messages.fetch({ after: firstMessageId, before: secondMessageId })
        .then(messages => {
            message.channel.bulkDelete(messages, true)
                .then(deletedMessages => {
                    message.channel.send(`J'ai supprim√© ${deletedMessages.size} message(s).`).then(msg => {
                        setTimeout(() => msg.delete(), 3000);
                    });
                })
                .catch(error => {
                    console.error(`Impossible de supprimer les messages en raison de: ${error}`);
                    message.reply("Une erreur s'est produite lors de la suppression des messages.");
                });
        })
        .catch(error => {
            console.error(`Impossible de r√©cup√©rer les messages en raison de: ${error}`);
            message.reply("Une erreur s'est produite lors de la r√©cup√©ration des messages.");
        });
    break;
}
});



//        oooooooooo.   oooooooooooo ooooooooo.         .o.       ooooooooo.   ooooooooooooo oooooooooooo ooo        ooooo oooooooooooo ooooo      ooo ooooooooooooo 
//        `888'   `Y8b  `888'     `8 `888   `Y88.      .888.      `888   `Y88. 8'   888   `8 `888'     `8 `88.       .888' `888'     `8 `888b.     `8' 8'   888   `8 
//         888      888  888          888   .d88'     .8"888.      888   .d88'      888       888          888b     d'888   888          8 `88b.    8       888      
//         888      888  888oooo8     888ooo88P'     .8' `888.     888ooo88P'       888       888oooo8     8 Y88. .P  888   888oooo8     8   `88b.  8       888      
//         888      888  888    "     888           .88ooo8888.    888`88b.         888       888    "     8  `888'   888   888    "     8     `88b.8       888      
//         888     d88'  888       o  888          .8'     `888.   888  `88b.       888       888       o  8    Y     888   888       o  8       `888       888      
//        o888bood8P'   o888ooooood8 o888o        o88o     o8888o o888o  o888o     o888o     o888ooooood8 o8o        o888o o888ooooood8 o8o        `8      o888o  



const { MessageActionRow, MessageSelectMenu, MessageButton } = require('discord.js');
const createMenu = (customId, start, end, extraOptions = []) => {
    const menu = new MessageSelectMenu()
        .setCustomId(customId)
        .setPlaceholder(`Choisissez votre d√©partement du ${start} au ${end}`)
        .addOptions(
            Array.from({ length: end - start + 1 }, (_, i) => {
                const num = (i + start).toString().padStart(2, '0');
                return {
                    label: `D√©partement ${num}`,
                    value: `departement_${num}`,
                };
            }).concat(extraOptions)
        );

    const row = new MessageActionRow()
        .addComponents(menu);

    return row;
};

const createRemoveButton = () => {
    const button = new MessageButton()
        .setCustomId('departement_remove_departements')
        .setLabel('Retirer tous les D√©partements')
        .setStyle('DANGER');

    const row = new MessageActionRow()
        .addComponents(button);

    return row;
};

const handleInteraction = async (interaction) => {
  if (interaction.isSelectMenu() && interaction.customId.startsWith('departement_menu')) {
      const choice = interaction.values[0];
      const departementNumber = choice.split('_')[1];
      const roleName = `üß≠‚îÉD√©partement ${departementNumber}`;
      const role = interaction.guild.roles.cache.find(r => r.name === roleName);

      if (!role) {
          await interaction.reply({ content: `Le r√¥le **${roleName}** n'a pas √©t√© trouv√©.`, ephemeral: true });
          return;
      }

      try {
          await interaction.member.roles.add(role);
          const membersWithRole = interaction.guild.members.cache.filter(member => member.roles.cache.has(role.id));
          const memberMentions = membersWithRole.map(member => `<@${member.user.id}>`);
          await interaction.reply({ content: `Le r√¥le **${roleName}** vous a √©t√© attribu√©. \nLes adh√©rents suivants sont du m√™me d√©partement : ${memberMentions.join(', ')}`, ephemeral: true });
      } catch (error) {
          console.error(`Impossible d'attribuer le r√¥le en raison de: **${error}**`);
          await interaction.reply({ content: "Une erreur s'est produite lors de l'attribution du r√¥le.", ephemeral: true });
      }
  } else if (interaction.isButton() && interaction.customId === 'departement_remove_departements') {
      const departementRoles = interaction.member.roles.cache.filter(role => role.name.startsWith('üß≠‚îÉD√©partement'));
      const removedRoles = [];

      for (const role of departementRoles.values()) {
          try {
              await interaction.member.roles.remove(role);
              removedRoles.push(role.name);
          } catch (error) {
              console.error(`Impossible de retirer le r√¥le en raison de: **${error}**`);
          }
      }

      await interaction.reply({ content: `Le(s) r√¥le(s) suivant(s) vous ont √©t√© retir√©(s) : **${removedRoles.join('**, **')}**`, ephemeral: true });
  }
};


client.on("messageCreate", async message => {
    if (message.content === "ENVOIE_LES_MENUS_POUR_CHOISIR_SON_D√âPARTEMENT") {
        if (message.member.permissions.has("ADMINISTRATOR")) {
            const menu1 = createMenu('departement_menu1', 1, 25);
            const menu2 = createMenu('departement_menu2', 26, 50);
            const menu3 = createMenu('departement_menu3', 51, 75);
            const menu4 = createMenu('departement_menu4', 76, 95, [971, 972, 973, 974, 976].map(num => ({
              label: `D√©partement ${num}`,
              value: `departement_${num}`,
          })));

          const removeButtonRow = createRemoveButton();

          const { MessageEmbed } = require('discord.js');
          const embed = new MessageEmbed()
              .setTitle("üß≠ Choisis ton d√©partement gr√¢ce aux menus ci-dessous üß≠")
              .setColor("#0000FF")
              .setImage("https://cdn.discordapp.com/attachments/987820203016618015/1098258559319408731/DEPARTEMENT.gif")
              .setFooter("Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.", "https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png")
          await message.channel.send({ embeds: [embed], components: [menu1, menu2, menu3, menu4] });
          await message.channel.send({ content: '*(+971, 972, 973, 974, 976)*', components: [] });
          await message.channel.send({ content: ' ', components: [removeButtonRow] });

      } else {
          message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
      }
  }
});

client.on("interactionCreate", async interaction => {
  try {
      await handleInteraction(interaction);
  } catch (error) {
      console.error(error);
      await interaction.reply({ content: "Une erreur s'est produite lors du traitement de votre interaction.", ephemeral: true });
  }
});





client.on('messageCreate', async (message) => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'quidu') {
    const departmentNumber = args[0];

    if (!departmentNumber) {
      return message.reply('Veuillez fournir un **num√©ro** de d√©partement.', { ephemeral: true });
    }

    const departmentRole = message.guild.roles.cache.find(
      (role) => role.name === `üß≠‚îÉD√©partement ${departmentNumber}`
    );

    if (!departmentRole) {
      if (departmentNumber.length === 1) {
        return message.reply("Il faut **2 chiffres** pour le num√©ro du d√©partement. \nExemple : **1 ‚Üí 01**.", { ephemeral: true });
      } else {
        return message.reply(`Le r√¥le "üß≠‚îÉD√©partement **${departmentNumber}**" n'a pas √©t√© trouv√©.`, { ephemeral: true });
      }
    }

    const membersWithRole = message.guild.members.cache.filter((member) =>
      member.roles.cache.has(departmentRole.id)
    );

    if (membersWithRole.size === 0) {
      return message.reply({
        content: `**Aucun membre** n'a le r√¥le "üß≠‚îÉD√©partement ${departmentNumber}".`,
        ephemeral: true,
      });
    }

    const memberList = membersWithRole.map((member) => `- ${member}`).join('\n');

    const embed = new MessageEmbed()
      .setTitle(`Membres ayant le r√¥le "üß≠‚îÉD√©partement ${departmentNumber}" :`)
      .setDescription(memberList)
      .setColor('RANDOM');

    message.reply({ embeds: [embed], ephemeral: true });
  }
});

             

//          .oooooo.     .oooooo.   oooooooooo.   oooooooooooo 
//         d8P'  `Y8b   d8P'  `Y8b  `888'   `Y8b  `888'     `8 
//        888          888      888  888      888  888         
//        888          888      888  888      888  888oooo8    
//        888          888      888  888      888  888    "    
//        `88b    ooo  `88b    d88'  888     d88'  888       o 
//         `Y8bood8P'   `Y8bood8P'  o888bood8P'   o888ooooood8 
                                                                                                                           
                                                                                                                           
                                                                                                                           
client.on('messageCreate', async message => {
  if (message.author.bot) return;
  if (message.content === prefix + 'code') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    const url = 'https://github.com/mddesage/gomuscu';

    try {
      await message.author.send(`Voici le lien que vous avez demand√©: ${url}`);
      await message.reply('Je vous ai envoy√© un message priv√© avec le lien demand√©.');
    } catch (error) {
      console.error(error);
      message.reply("Je n'ai pas pu vous envoyer un message priv√©. Veuillez v√©rifier vos param√®tres de confidentialit√©.");
    }
  }
});
 


//        ooooooooo.   oooooooooooo ooooooooo.   oooooooooooo ooooooooooooo oooooooooooo 
//        `888   `Y88. `888'     `8 `888   `Y88. `888'     `8 8'   888   `8 `888'     `8 
//        888   .d88'  888          888   .d88'  888              888       888         
//        888ooo88P'   888oooo8     888ooo88P'   888oooo8         888       888oooo8    
//        888`88b.     888    "     888          888    "         888       888    "    
//        888  `88b.   888       o  888          888       o      888       888       o 
//        o888o  o888o o888ooooood8 o888o        o888ooooood8     o888o     o888ooooood8 
                                                                              
                                                                              
                                                                              
client.on('messageCreate', async (message) => {
    if (message.author.bot || !message.content.startsWith(prefix)) return;
  
    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();
  
    if (command === 'repete') {
      if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
        return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
      }
  
      const messageToRepeat = args.join(' ');
  
      if (!messageToRepeat) {
        return message.reply('Veuillez fournir un message √† r√©p√©ter ( ex : **<@994859660727291985> repete [le message √† r√©peter]** )');
      }
  
      message.channel.send(messageToRepeat);
    }
  });



//        ooooooooo.   oooooooooooo ooooooooo.   oooooooooooo ooooooooooooo oooooooooooo        .oo.           .oooooo..o ooooo     ooo ooooooooo.   ooooooooo.   ooooooooo.   
//        `888   `Y88. `888'     `8 `888   `Y88. `888'     `8 8'   888   `8 `888'     `8      .88' `8.        d8P'    `Y8 `888'     `8' `888   `Y88. `888   `Y88. `888   `Y88. 
//         888   .d88'  888          888   .d88'  888              888       888              88.  .8'        Y88bo.       888       8   888   .d88'  888   .d88'  888   .d88' 
//         888ooo88P'   888oooo8     888ooo88P'   888oooo8         888       888oooo8         `88.8P           `"Y8888o.   888       8   888ooo88P'   888ooo88P'   888ooo88P'  
//         888`88b.     888    "     888          888    "         888       888    "          d888[.8'            `"Y88b  888       8   888          888          888`88b.    
//         888  `88b.   888       o  888          888       o      888       888       o      88' `88.        oo     .d8P  `88.    .8'   888          888          888  `88b.  
//        o888o  o888o o888ooooood8 o888o        o888ooooood8     o888o     o888ooooood8      `bodP'`88.      8""88888P'     `YbodP'    o888o        o888o        o888o  o888o 



client.on('messageCreate', async (message) => {
    if (message.author.bot || !message.content.startsWith(prefix)) return;
  
    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();
  
    if (command === 'repete&suppr') {
      if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
        return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
      }
  
      const messageToRepeat = args.join(' ');
  
      if (!messageToRepeat) {
        return message.reply('Veuillez fournir un message √† r√©p√©terex : (ex : **<@994859660727291985> repete&suppr [le message √† r√©peter]**).');
      }
  
      message.channel.send(messageToRepeat);
  
      if (command === 'repete&suppr') {
        message.delete();
      }
    }
  });



//        ooooooooo.   oooooooooooo       .o.         .oooooo.   ooooooooooooo ooooo   .oooooo.   ooooo      ooo 
//        `888   `Y88. `888'     `8      .888.       d8P'  `Y8b  8'   888   `8 `888'  d8P'  `Y8b  `888b.     `8' 
//         888   .d88'  888             .8"888.     888               888       888  888      888  8 `88b.    8  
//         888ooo88P'   888oooo8       .8' `888.    888               888       888  888      888  8   `88b.  8  
//         888`88b.     888    "      .88ooo8888.   888               888       888  888      888  8     `88b.8  
//         888  `88b.   888       o  .8'     `888.  `88b    ooo       888       888  `88b    d88'  8       `888  
//        o888o  o888o o888ooooood8 o88o     o8888o  `Y8bood8P'      o888o     o888o  `Y8bood8P'  o8o        `8  



client.on('messageReactionAdd', async (reaction, user) => {
  if (user.bot) return;

  const message = reaction.message;
  if (message.author.bot) return; 
  await message.react(reaction.emoji);
});
  

//          .oooooo.   ooooo   ooooo       .o.       ooooooooooooo   .oooooo.    ooooooooo.   ooooooooooooo 
//         d8P'  `Y8b  `888'   `888'      .888.      8'   888   `8  d8P'  `Y8b   `888   `Y88. 8'   888   `8 
//        888           888     888      .8"888.          888      888            888   .d88'      888      
//        888           888ooooo888     .8' `888.         888      888            888ooo88P'       888      
//        888           888     888    .88ooo8888.        888      888     ooooo  888              888      
//        `88b    ooo   888     888   .8'     `888.       888      `88.    .88'   888              888      
//         `Y8bood8P'  o888o   o888o o88o     o8888o     o888o      `Y8bood8P'   o888o            o888o      




const CHATGPT_COMMAND = 'chatgpt';
const CHATGPT_API_URL = 'https://api.openai.com/v1/engines/davinci-codex/completions';
const CHATGPT_API_KEY = (process.env.GPT_KEY);
const axios = require('axios');

client.on('message', async (message) => {
    if (message.author.bot) return;

    if (message.content.startsWith(prefix + CHATGPT_COMMAND)) {
        const userInput = message.content.slice(prefix.length + CHATGPT_COMMAND.length).trim();

        const response = await getChatGPTResponse(userInput);
        message.channel.send(response);
    }
});

async function getChatGPTResponse(prompt) {
    try {
        const response = await axios.post(
            CHATGPT_API_URL,
            {
                prompt: prompt,
                max_tokens: 100,
                n: 1,
                stop: null,
                temperature: 1.0,
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${CHATGPT_API_KEY}`,
                },
            }
        );

        return response.data.choices[0].text.trim();
    } catch (error) {
        console.error('Erreur lors de l\'appel √† l\'API ChatGPT:', error);
        return 'D√©sol√©, je ne peux pas r√©pondre en ce moment.';
    }
}



//        oooooooooooo ooooooo  ooooo oooooooooooo ooooooooo.     .oooooo.   ooooo   .oooooo.   oooooooooooo 
//        `888'     `8  `8888    d8'  `888'     `8 `888   `Y88.  d8P'  `Y8b  `888'  d8P'  `Y8b  `888'     `8 
//         888            Y888..8P     888          888   .d88' 888           888  888           888         
//         888oooo8        `8888'      888oooo8     888ooo88P'  888           888  888           888oooo8    
//         888    "       .8PY888.     888    "     888`88b.    888           888  888           888    "    
//         888       o   d8'  `888b    888       o  888  `88b.  `88b    ooo   888  `88b    ooo   888       o 
//        o888ooooood8 o888o  o88888o o888ooooood8 o888o  o888o  `Y8bood8P'  o888o  `Y8bood8P'  o888ooooood8



const { exercices } = require('./commands/liste_exercices.js');
  
  client.on('message', (message) => {
    if (message.author.bot) return;
    if (!message.content.startsWith(prefix)) return;
  
    const args = message.content.slice(prefix.length).trim().split(/ +/g);
    const command = args.shift().toLowerCase();
  
    if (command === 'exercice') {
      let groupeMusculaire = args.join(' ');
      let exercicesFiltres = exercices;
  
      if (groupeMusculaire) {
        exercicesFiltres = exercices.filter(e => e.groupeMusculaire === groupeMusculaire);
        if (exercicesFiltres.length === 0) {
          message.channel.send(`Aucun exercice trouv√© pour le groupe musculaire "${groupeMusculaire}". V√©rifiez que le groupe musculaire est correct.`);
          return;
          }
          }
          const index = Math.floor(Math.random() * exercicesFiltres.length);
          const exercice = exercicesFiltres[index];
          message.channel.send(`**${exercice.nom}** - ${exercice.description}
*(Groupe musculaire : **${exercice.groupeMusculaire}**)*`);
        }
      });

client.on("messageCreate", async message => {
    if (message.author.bot) return;
  
    const args = message.content.slice(prefix.length).trim().split(/ +/g);
    const command = args.shift().toLowerCase();
  
    if (message.content.startsWith(prefix)) {
      switch (command) {
        case 'exerciceaide':
        case 'exercicehelp':
        case 'exercicesaide':
        case 'exerciceshelp':
        case 'aideexercice':
        case 'helpexercice':
        case 'aideexercices':
        case 'helpexercices':
          const embed = new Discord.MessageEmbed()
            .setColor("YELLOW")
            .setFooter({ text: "Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà." })
            .setImage("https://images-ext-2.discordapp.net/external/gXakbSDik9kWaj6hawV9rAI9bXb0G0IpVspJhvL96xw/https/www.zupimages.net/up/22/27/smao.png?width=1440&height=399")
            .setThumbnail("https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png")
            .setDescription(`
            
            Le prefix de <@994859660727291985> est **sa mention**.
            
            
            ${prefix}**exercice** 
            Envoie un exercice au hasard sur n'importe quel groupe musculaire (75 possiblit√©).
            
            ${prefix}**exercice** *[groupe musculaire]*
            Envoie un exercice au hasard sur le groupe musculaire cit√© (10 groupes musculaires).
            ¬†     ¬†- *√©paules\n¬†     ¬†- biceps\n¬†     ¬†- triceps\n¬†     ¬†- pectoraux\n¬†     ¬†- abdominaux\n¬†     ¬†- dos\n¬†     ¬†- fessiers\n¬†     ¬†- ischios jambiers\n¬†     ¬†- quadriceps\n¬†     ¬†- mollets*
            
            ${prefix}**exercice+**
            Envoie 11 boutons pour afficher des exercices de mani√®re totalement al√©atoire ou au choix du groupe musculaire.`)
            .setTitle("Liste des commandes EXERCICE");
            message.reply({ embeds: [embed] });
          break;
      }
    }
  }); 
  
  

//        oooooooooooo ooooooo  ooooo oooooooooooo ooooooooo.     .oooooo.   ooooo   .oooooo.   oooooooooooo            
//        `888'     `8  `8888    d8'  `888'     `8 `888   `Y88.  d8P'  `Y8b  `888'  d8P'  `Y8b  `888'     `8            
//         888            Y888..8P     888          888   .d88' 888           888  888           888             88     
//         888oooo8        `8888'      888oooo8     888ooo88P'  888           888  888           888oooo8        88     
//         888    "       .8PY888.     888    "     888`88b.    888           888  888           888    "    8888888888 
//         888       o   d8'  `888b    888       o  888  `88b.  `88b    ooo   888  `88b    ooo   888       o     88     
//        o888ooooood8 o888o  o88888o o888ooooood8 o888o  o888o  `Y8bood8P'  o888o  `Y8bood8P'  o888ooooood8     88     
                                                                                                              
                                                                                                              

client.on('messageCreate', async message => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'exercice+') {
    const boutons = ['√âpaules', 'Biceps', 'Triceps', 'Pectoraux', 'Abdominaux', 'Dos', 'Fessiers', 'Ischios Jambiers', 'Quadriceps', 'Mollets'].map((groupe, index) => {
      return new MessageButton()
        .setCustomId(`exercice_groupeMusculaire-${index}`)
        .setLabel(groupe)
        .setStyle('PRIMARY');
    });

    const boutonAleatoire = new MessageButton()
      .setCustomId('exercice_groupeMusculaire-aleatoire')
      .setLabel('Al√©atoire')
      .setStyle('PRIMARY');

    const row1 = new MessageActionRow().addComponents(boutons.slice(0, 5));
    const row2 = new MessageActionRow().addComponents(boutons.slice(5, 10));
    const row3 = new MessageActionRow().addComponents(boutonAleatoire);

    await message.reply({ content: 'Choisissez un groupe musculaire pour afficher un exercice au hasard parmi celui ci :', components: [row1, row2, row3] });
  }
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isButton() || !interaction.customId.startsWith('exercice_groupeMusculaire')) return;


  const buttonId = interaction.customId;
  const index = buttonId.split('-')[1];

  const groupesMusculaires = ['√©paules', 'biceps', 'triceps', 'pectoraux', 'abdominaux', 'dos', 'fessiers', 'ischios jambiers', 'quadriceps', 'mollets'];
  let groupeMusculaire = '';
  let boutton_name = '';

  if (index === 'aleatoire') {
    const randomIndex = Math.floor(Math.random() * groupesMusculaires.length);
    groupeMusculaire = groupesMusculaires[randomIndex];
    boutton_name = 'Al√©atoire';
  } else {
    groupeMusculaire = groupesMusculaires[parseInt(index)];
    if (groupeMusculaire) {
        boutton_name = groupeMusculaire.charAt(0).toUpperCase() + groupeMusculaire.slice(1);
    } else {
        console.error('groupeMusculaire est undefined');
        await interaction.reply(`Une erreur s'est produite. Groupe musculaire inconnu.`, { ephemeral: true });
        return;
    }
  }

  let exercicesFiltres = exercices.filter(e => e.groupeMusculaire === groupeMusculaire);

  if (exercicesFiltres.length === 0) {
      await interaction.reply(`Aucun exercice trouv√© pour le groupe musculaire "${groupeMusculaire}". V√©rifiez que le groupe musculaire est correct.`);
      return;
  }

  const exerciceIndex = Math.floor(Math.random() * exercicesFiltres.length);
  const exercice = exercicesFiltres[exerciceIndex];
  const userId = interaction.user.id;

  await interaction.reply(`**${exercice.nom}** - ${exercice.description}\n*(Groupe musculaire : **${exercice.groupeMusculaire}**)\n**${boutton_name}** demand√© par* <@${interaction.user.id}>`, { ephemeral: true });
});



//        ooooo ooooo      ooo oooooo     oooo ooooo ooooooooooooo oooooooooooo 
//        `888' `888b.     `8'  `888.     .8'  `888' 8'   888   `8 `888'     `8 
//         888   8 `88b.    8    `888.   .8'    888       888       888         
//         888   8   `88b.  8     `888. .8'     888       888       888oooo8    
//         888   8     `88b.8      `888.8'      888       888       888    "    
//         888   8       `888       `888'       888       888       888       o 
//        o888o o8o        `8        `8'       o888o     o888o     o888ooooood8 
                                                                      
                                                                      

client.on('messageCreate', async message => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (['invit', 'invite', 'invitation'].includes(command)) {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    let userID = args[0];

    if (!userID) {
      const response = await message.reply("Veuillez fournir un ID d'utilisateur.");

      const filter = m => m.author.id === message.author.id;
      const collected = await message.channel.awaitMessages({ filter, max: 1, time: 30000 });

      if (collected.size === 0) {
        return response.edit("Le temps est √©coul√©, veuillez r√©essayer.");
      }

      userID = collected.first().content;
    }

    try {
      const user = await client.users.fetch(userID);

      user.send(`Bonjour/bonsoir <@${userID}>, 

Je me permet de vous envoyer ce message pour le serveur discord ùê∫ùëÇùëÄùëàùëÜùê∂ùëà, une super communaut√© de passionn√©s de sport plus pr√©cis√©ment de musculation. Je vous invite donc √† cliquer sur le lien ci-dessous afin de pouvoir int√©grer notre communaut√©. 
Lors de votre arriv√©e, pensez √† passer la v√©rification en r√©√©crivant les lettres que vous voyez sur : <#987834307651457044>. 
      
      *Cordialement,  
      √âquipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.*
      
  https://discord.gg/T9fUEbsJrt`);

      message.channel.send(`Le message d'invitation a √©t√© envoy√© √† <@${userID}>.`);
    } catch (error) {
      console.error(error);
      message.reply("Impossible d'envoyer un message √† cet utilisateur. Assurez-vous que l'ID est correct.");
    }
  }
});



//        ooooooooo.   oooooooooooo ooooo ooooo      ooo oooooo     oooo ooooo ooooooooooooo oooooooooooo 
//        `888   `Y88. `888'     `8 `888' `888b.     `8'  `888.     .8'  `888' 8'   888   `8 `888'     `8 
//         888   .d88'  888          888   8 `88b.    8    `888.   .8'    888       888       888         
//         888ooo88P'   888oooo8     888   8   `88b.  8     `888. .8'     888       888       888oooo8    
//         888`88b.     888    "     888   8     `88b.8      `888.8'      888       888       888    "    
//         888  `88b.   888       o  888   8       `888       `888'       888       888       888       o 
//        o888o  o888o o888ooooood8 o888o o8o        `8        `8'       o888o     o888o     o888ooooood8 



client.on('messageCreate', async message => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (['reinvit', 'reinvite', 'r√©invite'].includes(command)) {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    let userID = args[0];

    if (!userID) {
      const response = await message.reply("Veuillez fournir un ID d'utilisateur.");

      const filter = m => m.author.id === message.author.id;
      const collected = await message.channel.awaitMessages({ filter, max: 1, time: 30000 });

      if (collected.size === 0) {
        return response.edit("Le temps est √©coul√©, veuillez r√©essayer.");
      }

      userID = collected.first().content;
    }

    try {
      const user = await client.users.fetch(userID);

      user.send(`Bonjour/bonsoir <@${userID}>, 

Vous avez rejoint le serveur ùê∫ùëÇùëÄùëàùëÜùê∂ùëà, cependant il semblerait que vous n'avez pas pass√© la v√©rification et donc avez √©t√© expuls√© du serveur. Je vous invite donc √† cliquer sur le lien ci-dessous afin de pouvoir r√©int√©grer notre communaut√©. 
Lors de votre arriv√©e, pensez √† passer la v√©rification en r√©√©crivant les lettres que vous voyez sur : <#987834307651457044>. 
      
      *Cordialement,  
      √âquipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.*
      
  https://discord.gg/T9fUEbsJrt`);

      message.channel.send(`Le message de r√©-invitation a √©t√© envoy√© √† <@${userID}>.`);
    } catch (error) {
      console.error(error);
      message.reply("Impossible d'envoyer un message √† cet utilisateur. Assurez-vous que l'ID est correct.");
    }
  }
});



//        ooo        ooooo ooooo     ooo ooooooooooooo oooooooooooo 
//        `88.       .888' `888'     `8' 8'   888   `8 `888'     `8 
//         888b     d'888   888       8       888       888         
//         8 Y88. .P  888   888       8       888       888oooo8    
//         8  `888'   888   888       8       888       888    "    
//         8    Y     888   `88.    .8'       888       888       o 
//        o8o        o888o    `YbodP'        o888o     o888ooooood8 


                                                          
client.on('messageCreate', async (message) => {
  if (!message.content.startsWith(`<@994859660727291985>`) || message.author.bot) return;

  const args = message.content
    .replace(`<@994859660727291985>`, '')
    .trim()
    .split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'mute') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    const target = message.mentions.members.filter(member => member.id !== client.user.id).first() || message.guild.members.cache.get(args[0]);

    if (!target) {
      return message.reply("Veuillez mentionner un utilisateur ou fournir son ID.");
    }

    const muteRoleID = '991408401538105445';
    const muteRole = message.guild.roles.cache.get(muteRoleID);

    if (!muteRole) {
      return message.reply("Le r√¥le de mute n'a pas √©t√© trouv√©.");
    }

    let muteDuration = args[1] || 'indefini';
    let muteTime = null;

    if (muteDuration !== 'indefini') {
      const timePattern = /^(\d+)\s*(minutes?|minute|min|heures?|heure|h)$/i;
      const match = muteDuration.match(timePattern);

      if (!match) {
        return message.reply('Veuillez sp√©cifier une dur√©e valide (en minutes ou heures). Exemple: 10min, 2h, 1heure');
      }

      const value = parseInt(match[1]);
      const unit = match[2].toLowerCase();

      if (unit.startsWith('min')) {
        muteTime = value * 60 * 1000;
      } else if (unit.startsWith('h') || unit.startsWith('heure')) {
        muteTime = value * 60 * 60 * 1000;
      }
    }

    await target.roles.add(muteRole);
    message.channel.send(`${target} a √©t√© mut√©${muteTime ? ` pour ${muteDuration}` : ' ind√©finiment'}.`);

    if (muteTime) {
      setTimeout(async () => {
        if (target.roles.cache.has(muteRoleID)) {
          await target.roles.remove(muteRole);
          message.channel.send(`${target} a √©t√© d√©mut√©.`);
        }
      }, muteTime);
    }
  } else if (command === 'demute') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }
  
    const target = message.mentions.members.filter(member => member.id !== client.user.id).first() || message.guild.members.cache.get(args[0]);
    if (!target) {
      return message.reply("Veuillez mentionner un utilisateur ou fournir son ID.");
    }
    
    const muteRoleID = '991408401538105445';
    const muteRole = message.guild.roles.cache.get(muteRoleID);
    
    if (!muteRole) {
      return message.reply("Le r√¥le de mute n'a pas √©t√© trouv√©.");
    }
    
    if (!target.roles.cache.has(muteRoleID)) {
      return message.reply(`${target} n'est pas actuellement mute.`);
    }
    
    await target.roles.remove(muteRole);
    message.channel.send(`${target} a √©t√© d√©mut√©.`);
  }
});    



//        ooo        ooooo oooooooooooo  .oooooo..o  .oooooo..o       .o.         .oooooo.    oooooooooooo      ooooooooo.   ooooooooo.   ooooo oooooo     oooo oooooooooooo 
//        `88.       .888' `888'     `8 d8P'    `Y8 d8P'    `Y8      .888.       d8P'  `Y8b   `888'     `8      `888   `Y88. `888   `Y88. `888'  `888.     .8'  `888'     `8 
//         888b     d'888   888         Y88bo.      Y88bo.          .8"888.     888            888               888   .d88'  888   .d88'  888    `888.   .8'    888         
//         8 Y88. .P  888   888oooo8     `"Y8888o.   `"Y8888o.     .8' `888.    888            888oooo8          888ooo88P'   888ooo88P'   888     `888. .8'     888oooo8    
//         8  `888'   888   888    "         `"Y88b      `"Y88b   .88ooo8888.   888     ooooo  888    "          888          888`88b.     888      `888.8'      888    "    
//         8    Y     888   888       o oo     .d8P oo     .d8P  .8'     `888.  `88.    .88'   888       o       888          888  `88b.   888       `888'       888       o 
//        o8o        o888o o888ooooood8 8""88888P'  8""88888P'  o88o     o8888o  `Y8bood8P'   o888ooooood8      o888o        o888o  o888o o888o       `8'       o888ooooood8 



client.on("messageCreate", async (message) => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === "messageprive") {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    const memberId = args.shift();
    const member = message.guild.members.cache.get(memberId);

    if (!member) {
      return message.reply("Veuillez fournir un ID de membre valide.");
    }

    const privateMessage = args.join(" ");

    if (!privateMessage) {
      return message.reply("Veuillez inclure un message √† envoyer.");
    }

    const senderMention = message.member.toString();

    try {
      const dm = await member.createDM();
      await dm.send(`***Le message suivant est envoy√© depuis le serveur Discord ùóöùó¢ ùó†ùó®ùó¶ùóñùó®.***
      
      
      ${privateMessage}
      

      ***Ce message est envoy√© par ${senderMention},
      ne pas r√©pondre √† ce message.***
            *Cordialement,  
            √âquipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.*
      
  https://discord.gg/T9fUEbsJrt`);

      message.reply(`Message envoy√© avec succ√®s √† <@${memberId}>.`);
    } catch (error) {
      console.error("Erreur lors de l'envoi du message priv√©:", error);
      message.reply("Impossible d'envoyer un message priv√© √† ce membre.");
    }
  }
});



//        oooooooooooo ooo        ooooo oooooooooo.  oooooooooooo oooooooooo.   
//        `888'     `8 `88.       .888' `888'   `Y8b `888'     `8 `888'   `Y8b  
//         888          888b     d'888   888     888  888          888      888 
//         888oooo8     8 Y88. .P  888   888oooo888'  888oooo8     888      888 
//         888    "     8  `888'   888   888    `88b  888    "     888      888 
//         888       o  8    Y     888   888    .88P  888       o  888     d88' 
//        o888ooooood8 o8o        o888o o888bood8P'  o888ooooood8 o888bood8P'   



const { Client, Intents, MessageEmbed } = require('discord.js');
const LESDIXMINDELEMBED = 10 * 60 * 1000;
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (!message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/g);
  const command = args.shift().toLowerCase();

  if (command === 'embed') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId) && !message.member.roles.cache.has('987820202198712448')) {
      return message.reply('D√©sol√©, cette commande est r√©serv√©e aux employ√©s et aux habitu√©s.');
    }

    const askForInput = async (question) => {
      const sentMessage = await message.reply(question);
      const filter = (m) => m.author.id === message.author.id;
      const collected = await message.channel.awaitMessages({ filter, max: 1, time: LESDIXMINDELEMBED });
      return collected.first().content;
    };

    const targetChannelId = await askForInput('Veuillez entrer l\'**ID** du salon o√π envoyer l\'embed, ou r√©pondez par "**ici**" ou "**here**" pour envoyer dans le salon actuel :');
    const embedTitle = await askForInput('Veuillez entrer le **titre** de l\'embed :');
    const embedDescription = await askForInput('Veuillez entrer la **description** de l\'embed :');
    const embedColor = await askForInput('Veuillez entrer la **couleur** de l\'embed (en hexad√©cimal) :\nhttps://htmlcolorcodes.com/fr/');
    const imageURL = await askForInput('Veuillez fournir l\'**URL** de l\'**image** (facultatif, r√©pondez par "**skip**" pour ignorer) :');

    const embed = new MessageEmbed()
      .setTitle(embedTitle)
      .setDescription(embedDescription)
      .setColor(embedColor);

    if (imageURL.toLowerCase() !== 'skip') {
      embed.setImage(imageURL);
    }

    const targetChannel = targetChannelId.toLowerCase() === 'ici' || targetChannelId.toLowerCase() === 'here'
      ? message.channel
      : await message.guild.channels.fetch(targetChannelId);

    targetChannel.send({ embeds: [embed] });
  }
});



//        ooooo          .oooooo.     .oooooo.     .oooooo..o 
//        `888'         d8P'  `Y8b   d8P'  `Y8b   d8P'    `Y8 
//         888         888      888 888           Y88bo.      
//         888         888      888 888            `"Y8888o.  
//         888         888      888 888     ooooo      `"Y88b 
//         888       o `88b    d88' `88.    .88'  oo     .d8P 
//        o888ooooood8  `Y8bood8P'   `Y8bood8P'   8""88888P'  



const fetch = require('node-fetch');
const herokuAppName = 'gomuscu';
const herokuApiKey = (process.env.HEROKU_KEY);
const channelId = '987820203016618014';

client.on('ready', () => {
  const channel = client.channels.cache.get(channelId);
  if (!channel) {
    console.error(`Impossible de trouver le salon avec l'ID ${channelId}`);
    return;
  }

  const herokuUrl = `https://api.heroku.com/apps/${herokuAppName}/log-sessions`;
  const requestOptions = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/vnd.heroku+json; version=3',
      'Authorization': `Bearer ${herokuApiKey}`
    },
    body: JSON.stringify({ 'tail': true })
  };

  fetch(herokuUrl, requestOptions)
    .then(response => response.json())
    .then(json => {
      const logStreamUrl = json.logplex_url;

      if (!logStreamUrl) {
        console.error('Impossible de r√©cup√©rer l\'URL du flux de logs Heroku');
        return;
      }

      fetch(logStreamUrl)
        .then(response => {
          response.body
            .on('data', chunk => {
              const message = chunk.toString().trim();
              if (message) {
                channel.send(`\`\`\`${message}\`\`\``);
              }
            })
            .on('error', err => {
              console.error('Erreur lors de la lecture du flux de logs Heroku:', err);
            });
        })
        .catch(err => {
          console.error('Erreur lors de la r√©cup√©ration du flux de logs Heroku:', err);
        });
    })
    .catch(err => {
      console.error('Erreur lors de la cr√©ation de la session de logs Heroku:', err);
    });
});



//        ooooooooooooo ooooo   .oooooo.   oooo    oooo oooooooooooo ooooooooooooo      ooooooooooooo   .oooooo.     .oooooo.   ooooo        
//        8'   888   `8 `888'  d8P'  `Y8b  `888   .8P'  `888'     `8 8'   888   `8      8'   888   `8  d8P'  `Y8b   d8P'  `Y8b  `888'        
//             888       888  888           888  d8'     888              888                888      888      888 888      888  888         
//             888       888  888           88888[       888oooo8         888                888      888      888 888      888  888         
//             888       888  888           888`88b.     888    "         888                888      888      888 888      888  888         
//             888       888  `88b    ooo   888  `88b.   888       o      888                888      `88b    d88' `88b    d88'  888       o 
//            o888o     o888o  `Y8bood8P'  o888o  o888o o888ooooood8     o888o              o888o      `Y8bood8P'   `Y8bood8P'  o888ooooood8



client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (!message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/g);
  const command = args.shift().toLowerCase();

  if (command === 'tickettoolsupport') {
      const embed = new MessageEmbed()
          .setColor('GREEN')
          .setTitle('Pour cr√©er un ticket_support, r√©agissez avec üì©')
          .setDescription('Mise en relation avec un <@&987820202198712449>.\n ')
          .setFooter('Au nom de l\'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.', 'https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png');

      const button = new MessageButton()
          .setCustomId('create_ticket_support')
          .setLabel('üì© Cr√©er un ticket')
          .setStyle('SECONDARY');

      const row = new MessageActionRow()
          .addComponents(button);

      await message.channel.send({ embeds: [embed], components: [row] });
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  const user = interaction.user;
  const guild = interaction.guild;

  if (interaction.customId === 'create_ticket_support') {
    await interaction.reply({ content: 'Votre ticket_support a bien √©t√© cr√©√©', ephemeral: true });

    const ticketSupportName = `„Äé‚úâ„Äèùëáùëñùëêùëòùëíùë°_ùëÜùë¢ùëùùëùùëúùëüùë°-${user.username}`;

      const overwrites = [
          {
              id: guild.id,
              deny: ['VIEW_CHANNEL'],
          },
          {
              id: user.id,
              allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY'],
          },
          {
              id: '987820202198712449', 
              allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY'],
          },
      ];

      guild.channels.create(ticketSupportName, {
          type: 'GUILD_TEXT',
          permissionOverwrites: overwrites,
      }).then(async (channel) => {
          const ticketSupportEmbed = new MessageEmbed()
              .setColor('GREEN')
              .setTitle('Pour fermer le ticket_support, r√©agissez avec l\'√©mote üîí')
              .setDescription('Le support technique vous contactera sous peu.\n ')
              .setFooter('Au nom de l\'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.', 'https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png');

          const closeButton = new MessageButton()
              .setCustomId('close_ticket_support')
              .setLabel('üîí Fermer')
              .setStyle('SECONDARY');

          const ticketSupportRow = new MessageActionRow()
              .addComponents(closeButton);

              await channel.send({ content: `<@${user.id}> Que pouvons-nous faire pour vous ?`, embeds: [ticketSupportEmbed], components: [ticketSupportRow] });
            });
        }
    
        if (interaction.customId === 'close_ticket_support') {
            const continueButton = new MessageButton()
                .setCustomId('continue_ticket_support')
                .setLabel('Continuer')
                .setStyle('SUCCESS');
    
            const cancelButton = new MessageButton()
                .setCustomId('cancel_ticket_support')
                .setLabel('Annuler')
                .setStyle('DANGER');
    
            const decisionRow = new MessageActionRow()
                .addComponents(continueButton, cancelButton);
    
            await interaction.reply({ content: '√ätes-vous s√ªr de vouloir fermer ce ticket_support ?', components: [decisionRow] });
        }
    
        if (interaction.customId === 'continue_ticket_support') {
            const channel = interaction.channel;
            await interaction.reply({ content: 'Le ticket_support sera ferm√©.', ephemeral: true });
            setTimeout(() => {
                channel.delete();
            }, 2000);
        }
    
        if (interaction.customId === 'cancel_ticket_support') {
            await interaction.reply({ content: 'Annulation de la fermeture du ticket_support.', ephemeral: true });
            setTimeout(async () => {
                const fetchedMessage = await interaction.channel.messages.fetch(interaction.message.id);
                const updatedRow = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('close_ticket_support')
                            .setLabel('üîí Fermer')
                            .setStyle('SECONDARY')
                    );
    
                await fetchedMessage.edit({ components: [updatedRow] });
            }, 2000);
        }
    });











    client.on('messageCreate', async (message) => {
      if (message.author.bot) return;
      if (!message.content.startsWith(prefix)) return;
  
      const args = message.content.slice(prefix.length).trim().split(/ +/g);
      const command = args.shift().toLowerCase();
  
      if (command === 'tickettoolcoach') {
          const embed = new MessageEmbed()
              .setColor('GREEN')
              .setTitle('Pour cr√©er un ticket_coach, r√©agissez avec üì©')
              .setDescription('Mise en relation avec un <@&987820202198712447>.\n ')
              .setFooter('Au nom de l\'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.', 'https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png');
  
          const button = new MessageButton()
              .setCustomId('create_ticket_coach')
              .setLabel('üì© Cr√©er un ticket')
              .setStyle('SECONDARY');
  
          const row = new MessageActionRow()
              .addComponents(button);
  
          await message.channel.send({ embeds: [embed], components: [row] });
      }
  });
  
  client.on('interactionCreate', async (interaction) => {
      if (!interaction.isButton()) return;
  
      const user = interaction.user;
      const guild = interaction.guild;
  
      if (interaction.customId === 'create_ticket_coach') {
        await interaction.reply({ content: 'Votre ticket_coach a bien √©t√© cr√©√©', ephemeral: true });
  
        const ticketSupportName = `„Äé‚úâ„Äèùëáùëñùëêùëòùëíùë°_ùê∂ùëúùëéùëê‚Ñé-${user.username}`;
  
          const overwrites = [
              {
                  id: guild.id,
                  deny: ['VIEW_CHANNEL'],
              },
              {
                  id: user.id,
                  allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY'],
              },
              {
                  id: '987820202198712449', 
                  allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY'],
              },
              {
                id: '987820202198712447',
                allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'READ_MESSAGE_HISTORY'],
              },
            
          ];
  
          guild.channels.create(ticketSupportName, {
              type: 'GUILD_TEXT',
              permissionOverwrites: overwrites,
          }).then(async (channel) => {
              const ticketEmbed = new MessageEmbed()
                  .setColor('GREEN')
                  .setTitle('Pour fermer le ticket_coach, r√©agissez avec l\'√©mote üîí')
                  .setDescription('Un coach vous contactera sous peu.\n ')
                  .setFooter('Au nom de l\'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.', 'https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png');
  
              const closeButton = new MessageButton()
                  .setCustomId('close_ticket_coach')
                  .setLabel('üîí Fermer')
                  .setStyle('SECONDARY');
  
              const ticketRow = new MessageActionRow()
                  .addComponents(closeButton);
  
                  await channel.send({ content: `<@${user.id}> Que pouvons-nous faire pour vous ?`, embeds: [ticketEmbed], components: [ticketRow] });
                });
            }
        
            if (interaction.customId === 'close_ticket_coach') {
                const continueButton = new MessageButton()
                    .setCustomId('continue_ticket_coach')
                    .setLabel('Continuer')
                    .setStyle('SUCCESS');
        
                const cancelButton = new MessageButton()
                    .setCustomId('cancel_ticket_coach')
                    .setLabel('Annuler')
                    .setStyle('DANGER');
        
                const decisionRow = new MessageActionRow()
                    .addComponents(continueButton, cancelButton);
        
                await interaction.reply({ content: '√ätes-vous s√ªr de vouloir fermer ce ticket_coach ?', components: [decisionRow] });
            }
        
            if (interaction.customId === 'continue_ticket_coach') {
                const channel = interaction.channel;
                await interaction.reply({ content: 'Le ticket_coach sera ferm√©.', ephemeral: true });
                setTimeout(() => {
                    channel.delete();
                }, 2000);
            }
        
            if (interaction.customId === 'cancel_ticket_coach') {
                await interaction.reply({ content: 'Annulation de la fermeture du ticket_coach.', ephemeral: true });
                setTimeout(async () => {
                    const fetchedMessage = await interaction.channel.messages.fetch(interaction.message.id);
                    const updatedRow = new MessageActionRow()
                        .addComponents(
                            new MessageButton()
                                .setCustomId('close_ticket_coach')
                                .setLabel('üîí Fermer')
                                .setStyle('SECONDARY')
                        );
        
                    await fetchedMessage.edit({ components: [updatedRow] });
                }, 2000);
            }
        });
       


//              .o.  ooooo     oooo oooooooooooo ooooooooo.   ooooooooooooo ooooo  .oooooo..o  .oooooo..o oooooooooooo ooo        ooooo oooooooooooo ooooo      ooo ooooooooooooo 
//             .888. `888.     .8'  `888'     `8 `888   `Y88. 8'   888   `8 `888' d8P'    `Y8 d8P'    `Y8 `888'     `8 `88.       .888' `888'     `8 `888b.     `8' 8'   888   `8 
//            .8"888. `888.   .8'    888          888   .d88'      888       888  Y88bo.      Y88bo.       888          888b     d'888   888          8 `88b.    8       888      
//           .8' `888. `888. .8'     888oooo8     888ooo88P'       888       888   `"Y8888o.   `"Y8888o.   888oooo8     8 Y88. .P  888   888oooo8     8   `88b.  8       888      
//          .88ooo8888. `888.8'      888    "     888`88b.         888       888       `"Y88b      `"Y88b  888    "     8  `888'   888   888    "     8     `88b.8       888      
//         .8'     `888. `888'       888       o  888  `88b.       888       888  oo     .d8P oo     .d8P  888       o  8    Y     888   888       o  8       `888       888      
//        o88o     o8888o `8'       o888ooooood8 o888o  o888o     o888o     o888o 8""88888P'  8""88888P'  o888ooooood8 o8o        o888o o888ooooood8 o8o        `8      o888o     



function getWarnings(member) {
  let warningCount = 0;
  if (member.roles.cache.has('987820202177749086')) warningCount++;
  if (member.roles.cache.has('987820202177749085')) warningCount++;
  if (member.roles.cache.has('987820202177749084')) warningCount++;

  return warningCount;
}

client.on('messageCreate', async (message) => {
  if (!message.content.startsWith(prefix) || message.author.bot) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'avertissement' || command === 'avertissementretirer' || command === 'avertissementinfo') {
    const user = message.mentions.users.filter(user => user.id !== client.user.id).first();
    if (!user) {
      message.reply('Veuillez mentionner un **utilisateur**.');
      return;
    }

    const member = message.guild.members.cache.get(user.id);
    const warningCount = getWarnings(member);

    if (command === 'avertissement') {
      if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
        return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
      }
      let roleId;
      switch (warningCount) {
        case 0:
          roleId = '987820202177749086';
          break;
        case 1:
          roleId = '987820202177749085';
          break;
        case 2:
          roleId = '987820202177749084';
          break;
        default:
          return;
      }

      await member.roles.add(roleId);
      message.channel.send(`Un avertissement a √©t√© ajout√© pour ${user}. Il/elle en a maintenant **${warningCount + 1}**.`);
    } else if (command === 'avertissementretirer') {
      if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
        return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
      }
      let roleId;
      switch (warningCount - 1) {
        case 0:
          roleId = '987820202177749086';
          break;
        case 1:
          roleId = '987820202177749085';
          break;
        case 2:
          roleId = '987820202177749084';
          break;
        default:
          return;
      }

      if (warningCount > 0) {
        await member.roles.remove(roleId);
        message.channel.send(`Un avertissement a √©t√© retir√© pour ${user}. Il/elle en a maintenant **${warningCount - 1}**.`);
      } else {
        message.channel.send(`${user} n'a pas d'avertissement √† retirer.`);
      }
    } else if (command === 'avertissementinfo') {
      message.channel.send(`${user} a **${warningCount}** avertissement(s).`);
    }
  }
});



//        ooo        ooooo   .oooooo.   ooooooooooooo ooooo oooooo     oooo       .o.       ooooooooooooo ooooo   .oooooo.   ooooo      ooo 
//        `88.       .888'  d8P'  `Y8b  8'   888   `8 `888'  `888.     .8'       .888.      8'   888   `8 `888'  d8P'  `Y8b  `888b.     `8' 
//         888b     d'888  888      888      888       888    `888.   .8'       .8"888.          888       888  888      888  8 `88b.    8  
//         8 Y88. .P  888  888      888      888       888     `888. .8'       .8' `888.         888       888  888      888  8   `88b.  8  
//         8  `888'   888  888      888      888       888      `888.8'       .88ooo8888.        888       888  888      888  8     `88b.8  
//         8    Y     888  `88b    d88'      888       888       `888'       .8'     `888.       888       888  `88b    d88'  8       `888  
//        o8o        o888o  `Y8bood8P'      o888o     o888o       `8'       o88o     o8888o     o888o     o888o  `Y8bood8P'  o8o        `8  



client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  if (message.content === 'ENVOIE_LE_BOUTON_POUR_AJOUTER_MOTIVATION') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    const roleToAddId = '1091411059648241684';

    const embed = new MessageEmbed()
      .setTitle('Appuyer sur le bouton pour ajouter')
      .setDescription(`<@&${roleToAddId}> \n\n Ceci enverra dans un salon sp√©cifique un message de motivation tout les matins !`)
      .setColor('#774466')
      .setFooter('Au nom de l\'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.', 'https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png');

    const addButton = new MessageButton()
      .setCustomId('add_motivation_role')
      .setLabel('üí™Motivation')
      .setStyle('PRIMARY');

    const removeButton = new MessageButton()
      .setCustomId('remove_motivation_role')
      .setLabel('‚õîRetirer')
      .setStyle('DANGER');

    const row = new MessageActionRow()
      .addComponents(addButton, removeButton);

    message.channel.send({ embeds: [embed], components: [row] });
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  const roleToAddId = '1091411059648241684';

  if (interaction.customId === 'add_motivation_role') {
    if (interaction.member.roles.cache.has(roleToAddId)) {
      await interaction.reply({ content: 'Le r√¥le de **motivation** est d√©j√† attribu√©.', ephemeral: true });
    } else {
      await interaction.member.roles.add(roleToAddId);
      await interaction.reply({ content: 'Le r√¥le de **motivation** a √©t√© ajout√© avec succ√®s !', ephemeral: true });
    }
  } else if (interaction.customId === 'remove_motivation_role') {
    if (!interaction.member.roles.cache.has(roleToAddId)) {
      await interaction.reply({ content: 'Le r√¥le de **motivation** n\'est d√©j√† pas attribu√©.', ephemeral: true });
    } else {
      await interaction.member.roles.remove(roleToAddId);
      await interaction.reply({ content: 'Le r√¥le de **motivation** a √©t√© retir√© avec succ√®s !', ephemeral: true });
    }
  }
});




const { motivationMessages } = require('./commands/liste_motivations.js');

client.on('ready', () => {

  setInterval(() => {
      const now = new Date();
      if (now.getHours() === 5 && now.getMinutes() === 0) {
          const channel = client.channels.cache.get('1091411626617479210');
          if (channel) {
              const motivationMessagesAleatoire = Math.floor(Math.random() * motivationMessages.length);
              channel.send(`
 Bonjour √† tous! 
Il est temps de commencer une nouvelle journ√©e pleine d\'√©nergie et de motivation !
             Voici la phrase du jour :
                    
              
                         ***${motivationMessages[motivationMessagesAleatoire]}***
                    
                         
      ||<@&1091411059648241684>||
                    `);
          }
      }
  }, 60 * 1000); 
});

client.on('messageCreate', (message) => {
  if (message.author.bot) return;
  if (!message.content.startsWith(prefix)) return;

  const command = message.content.slice(prefix.length).trim().toLowerCase();
  if (command === 'motivationnow') {
      const channel = client.channels.cache.get('1091411626617479210');
      if (channel) {
          const motivationMessagesAleatoire = Math.floor(Math.random() * motivationMessages.length);
          channel.send(`
 Bonjour √† tous! 
Il est temps de commencer une nouvelle journ√©e pleine d\'√©nergie et de motivation !
             Voici la phrase du jour :
                    
              
                         ***${motivationMessages[motivationMessagesAleatoire]}***
                    
                         
      ||<@&1091411059648241684>||
                    `);
      }
  }
});



//        .oooooo..o oooooooooooo ooooo        oooooooooooo   .oooooo.   ooooooooooooo  .oooooo..o      ooo        ooooo oooooooooooo ooooo      ooo ooooo     ooo  .oooooo..o 
//        d8P'    `Y8 `888'     `8 `888'        `888'     `8  d8P'  `Y8b  8'   888   `8 d8P'    `Y8      `88.       .888' `888'     `8 `888b.     `8' `888'     `8' d8P'    `Y8 
//        Y88bo.       888          888          888         888               888      Y88bo.            888b     d'888   888          8 `88b.    8   888       8  Y88bo.      
//         `"Y8888o.   888oooo8     888          888oooo8    888               888       `"Y8888o.        8 Y88. .P  888   888oooo8     8   `88b.  8   888       8   `"Y8888o.  
//             `"Y88b  888    "     888          888    "    888               888           `"Y88b       8  `888'   888   888    "     8     `88b.8   888       8       `"Y88b 
//        oo     .d8P  888       o  888       o  888       o `88b    ooo       888      oo     .d8P       8    Y     888   888       o  8       `888   `88.    .8'  oo     .d8P 
//        8""88888P'  o888ooooood8 o888ooooood8 o888ooooood8  `Y8bood8P'      o888o     8""88888P'       o8o        o888o o888ooooood8 o8o        `8     `YbodP'    8""88888P'  



const gymRoles = [
  '987821823607570462',
  '987822236335480842',
  '1097948959907000422',
  '1097947839134441492',
  '1097947941823590491',
  '1097948044474990752',
  '1097948253254852738',
  '1097948278097723462',
  '1097948489696161834',
  '987822447967473734'
];

const gymRoleNames = [
  'Basic Fit',
  'Fitness Park',
  'On Air',
  'Orange Bleue',
  'Keep Cool',
  'Salle Power Lifting',
  'Salle Cross Fit',
  'Salle Ind√©pandente',
  'Park Street',
  'Home Gym'
];

client.on('messageCreate', async message => {
if (message.content === "ENVOIE_LE_MENU_POUR_CHOISIR_SA_SALLE") {
  if (message.member.permissions.has("ADMINISTRATOR")) {

  
  const gymRow1 = new MessageActionRow()
    .addComponents(
      new MessageSelectMenu()
        .setCustomId('gymSelect')
        .setPlaceholder('Choisis ta salle de sport')
        .addOptions(gymRoleNames.map((name, index) => ({ label: name, value: gymRoles[index] })))
    );
  
  const gymRow2 = new MessageActionRow()
    .addComponents(
      new MessageButton()
        .setCustomId('gymRemove')
        .setLabel('Retirer toutes les salles')
        .setStyle('DANGER')
    );

  const gymEmbed = {
    title: "üè∞¬†Choisis ta salle de sport gr√¢ce au menu ci-dessous¬†üè∞",
    color: "#0000FF",
    image: {
      url: "https://cdn.discordapp.com/attachments/987820203016618015/1098259736891228191/SALLE_DE_SPORT.gif"
    },
    footer: {
      text: "Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.",
      iconURL: "https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png"
    }
  };

  await message.channel.send({ embeds: [gymEmbed], components: [gymRow1, gymRow2] });
} else {
  message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
}
}
});

client.on('interactionCreate', async interaction => {
if (interaction.isSelectMenu()) {
  
  if (interaction.customId === 'gymSelect') {
    const role = interaction.values[0];
    const roleName = gymRoleNames[gymRoles.indexOf(role)];
    
    await interaction.member.roles.add(role);
    await interaction.reply({ content: `Le r√¥le de la salle de sport **${roleName}** vous a √©t√© attribu√©.`, ephemeral: true });
  }
  
} else if (interaction.isButton()) {
  
  if (interaction.customId === 'gymRemove') {
    await interaction.member.roles.remove(gymRoles);
    await interaction.reply({ content: `Tous les r√¥les de **salle de sport** vous ont √©t√© retir√©s.`, ephemeral: true });
  }
  
}
});



const disciplineRoles = [
  '987827124138307604',
  '987826944630468688',
  '987827687664005170',
  '1097950501963829411',
  '1097950743513796760',
  '1097950337324826725',
  '1097950875298828461'
];

const disciplineRoleNames = [
  'Body Building',
  'Power Lifting',
  'Street Workout',
  'Street Lifting',
  'Halt√©rophilie',
  'Cross Fit',
  'Fitness'
];

client.on('messageCreate', async message => {
if (message.content === "ENVOIE_LE_MENU_POUR_CHOISIR_SA_DISCIPLINE") {
  if (message.member.permissions.has("ADMINISTRATOR")) {

  const disciplineRow1 = new MessageActionRow()
    .addComponents(
      new MessageSelectMenu()
        .setCustomId('disciplineSelect')
        .setPlaceholder('Choisis ta discipline')
        .addOptions(disciplineRoleNames.map((name, index) => ({ label: name, value: disciplineRoles[index] })))
    );
  
  const disciplineRow2 = new MessageActionRow()
    .addComponents(
      new MessageButton()
        .setCustomId('disciplineRemove')
        .setLabel('Retirer toutes les disciplines')
        .setStyle('DANGER')
    );

  const disciplineEmbed = {
    title: "üèãÔ∏è Choisis ta discipline gr√¢ce au menu ci-dessous üèãÔ∏è",
    color: "#0000FF",
    image: {
      url: "https://cdn.discordapp.com/attachments/987820203016618015/1098259759242686547/DISCIPLINE.gif"
    },
    footer: {
      text: "Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.",
      iconURL: "https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png"
    }
  };

  await message.channel.send({ embeds: [disciplineEmbed], components: [disciplineRow1, disciplineRow2] });
} else {
  message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
}
}
});

client.on('interactionCreate', async interaction => {
if (interaction.isSelectMenu()) {
  
  if (interaction.customId === 'disciplineSelect') {
    const role = interaction.values[0];
    const roleName = disciplineRoleNames[disciplineRoles.indexOf(role)];
    
    await interaction.member.roles.add(role);
    await interaction.reply({ content: `Le r√¥le de la discipline du **${roleName}** vous a √©t√© attribu√©.`, ephemeral: true });
  }
  
} else if (interaction.isButton()) {
  
  if (interaction.customId === 'disciplineRemove') {
    await interaction.member.roles.remove(disciplineRoles);
    await interaction.reply({ content: `Tous les r√¥les de **discipline** vous ont √©t√© retir√©s.`, ephemeral: true });
  }
  
}
});



const sexeRoles = [  '987826511295950889',  '987826660130816020'];

const sexeRoleNames = [  'Fille',  'Gar√ßon'];

client.on('messageCreate', async message => {
  if (message.content === "ENVOIE_LE_MENU_POUR_CHOISIR_SON_SEXE") {
    if (message.member.permissions.has("ADMINISTRATOR")) {

    const sexeRow1 = new MessageActionRow()
      .addComponents(
        new MessageSelectMenu()
          .setCustomId('sexeSelect')
          .setPlaceholder('Choisis ton sexe')
          .addOptions(sexeRoleNames.map((name, index) => ({ label: name, value: sexeRoles[index] })))
      );
  
    const sexeRow2 = new MessageActionRow()
      .addComponents(
        new MessageButton()
          .setCustomId('sexeRemove')
          .setLabel('Retirer tous les sexes')
          .setStyle('DANGER')
      );

    const sexeEmbed = {
      title: "‚ôÄÔ∏è Choisis ton sexe gr√¢ce au menu ci-dessous ‚ôÇÔ∏è",
      color: "#0000FF",
      image: {
        url: "https://cdn.discordapp.com/attachments/987820203016618015/1098260465798357052/SEXE.gif"
      },
      footer: {
        text: "Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.",
        iconURL: "https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png"
      }
    };

    await message.channel.send({ embeds: [sexeEmbed], components: [sexeRow1, sexeRow2] });
  } else {
    message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
  }
  }
});

client.on('interactionCreate', async interaction => {
  if (interaction.isSelectMenu()) {
  
    if (interaction.customId === 'sexeSelect') {
      const role = interaction.values[0];
      const roleName = sexeRoleNames[sexeRoles.indexOf(role)];
      
      await interaction.member.roles.add(role);
      await interaction.reply({ content: `Le r√¥le de **${roleName}** vous a √©t√© attribu√©.`, ephemeral: true });
    }
  
  } else if (interaction.isButton()) {
  
    if (interaction.customId === 'sexeRemove') {
      await interaction.member.roles.remove(sexeRoles);
      await interaction.reply({ content: `Tous les r√¥les de **sexe** vous ont √©t√© retir√©s.`, ephemeral: true });
    }
  
  }
});



const notificationRoles = [
  '987820202177749089',
  '987820202177749090',
  '987820202177749091',
];

const notificationRoleNames = [
  'Annonces',
  'Programmes',
  'R√©seaux Sociaux',
];

client.on('messageCreate', async message => {
  if (message.content === "ENVOIE_LE_MENU_POUR_CHOISIR_SES_NOTIFICATIONS") {
    if (message.member.permissions.has("ADMINISTRATOR")) {

    const notificationRow1 = new MessageActionRow()
      .addComponents(
        new MessageSelectMenu()
          .setCustomId('notificationSelect')
          .setPlaceholder('Choisis tes notifications')
          .addOptions(notificationRoleNames.map((name, index) => ({ label: name, value: notificationRoles[index] })))
      );
  
    const notificationRow2 = new MessageActionRow()
      .addComponents(
        new MessageButton()
          .setCustomId('notificationRemove')
          .setLabel('Retirer toutes les notifications')
          .setStyle('DANGER')
      );

    const notificationEmbed = {
      title: "üîî Choisis tes notifications gr√¢ce au menu ci-dessous üîî",
      color: "#0000FF",
      image: {
        url: "https://cdn.discordapp.com/attachments/987820203016618015/1098261868621078658/NOTIFICATION.gif"
      },
      footer: {
        text: "Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.",
        iconURL: "https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png"
      }
    };

    await message.channel.send({ embeds: [notificationEmbed], components: [notificationRow1, notificationRow2] });
  } else {
    message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
  }
  }
});

client.on('interactionCreate', async interaction => {
  if (interaction.isSelectMenu()) {
    if (interaction.customId === 'notificationSelect') {
      const role = interaction.values[0];
      const roleName = notificationRoleNames[notificationRoles.indexOf(role)];
      
      await interaction.member.roles.add(role);
      await interaction.reply({ content: `Le r√¥le de notification de **${roleName}** vous a √©t√© attribu√©.`, ephemeral: true });
    }
  } else if (interaction.isButton()) {
    if (interaction.customId === 'notificationRemove') {
      await interaction.member.roles.remove(notificationRoles);
      await interaction.reply({ content: `Tous les r√¥les de **notification** vous ont √©t√© retir√©s.`, ephemeral: true });
    }
  }
});



//        ooooooooo.   oooooooooooo   .oooooo.    ooooo        oooooooooooo ooo        ooooo oooooooooooo ooooo      ooo ooooooooooooo 
//        `888   `Y88. `888'     `8  d8P'  `Y8b   `888'        `888'     `8 `88.       .888' `888'     `8 `888b.     `8' 8'   888   `8 
//         888   .d88'  888         888            888          888          888b     d'888   888          8 `88b.    8       888      
//         888ooo88P'   888oooo8    888            888          888oooo8     8 Y88. .P  888   888oooo8     8   `88b.  8       888      
//         888`88b.     888    "    888     ooooo  888          888    "     8  `888'   888   888    "     8     `88b.8       888      
//         888  `88b.   888       o `88.    .88'   888       o  888       o  8    Y     888   888       o  8       `888       888      
//        o888o  o888o o888ooooood8  `Y8bood8P'   o888ooooood8 o888ooooood8 o8o        o888o o888ooooood8 o8o        `8      o888o     



client.on('messageCreate', async message => {
  if (message.content === 'ENVOIE_LE_REGLEMENT') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }
    const embed = new MessageEmbed()
    .setColor('GREEN')
    .setTitle('R√®glement √† suivre chez ùê∫ùëÇùëÄùëàùëÜùê∂ùëà')
    .setDescription(`Bienvenue sur le serveur Discord ùê∫ùëÇùëÄùëàùëÜùê∂ùëà d√©di√© √† la musculation ! Nous sommes ravis de vous accueillir dans notre communaut√© de passionn√©s. Notre objectif est de cr√©er un espace convivial et respectueux o√π les membres peuvent √©changer des conseils, des astuces et des exp√©riences sur la musculation.

    Afin de maintenir une ambiance agr√©able et respectueuse, nous vous demandons de suivre les r√®gles suivantes :
    
    **1**. *Respectez les autres membres* : Nous encourageons les discussions anim√©es et les d√©bats, mais nous ne tol√©rons pas les insultes, les attaques personnelles ou les comportements agressifs. Si vous √™tes en d√©saccord avec quelqu'un, exprimez-vous de mani√®re respectueuse et constructive. Nous sommes tous ici pour apprendre et grandir ensemble.
    
    **2**. *√âvitez les sujets controvers√©s* : Nous demandons √† nos membres d'√©viter les sujets controvers√©s tels que la politique ou la religion. Ces sujets peuvent rapidement d√©g√©n√©rer en conflits et ne sont pas propices √† une communaut√© soud√©e. Notre objectif est de cr√©er un espace o√π tout le monde se sent √† l'aise de partager ses id√©es et ses exp√©riences sans crainte de jugement ou de conflit.
    
    **3**. *Ne partagez pas de contenu inappropri√© ou ill√©gal* : Nous ne tol√©rons pas le partage de contenu inappropri√© ou ill√©gal sur notre serveur. Cela inclut, mais n'est pas limit√© √†, la pornographie, la violence gratuite, les discours haineux ou les activit√©s ill√©gales. Nous voulons que notre serveur soit un endroit s√ªr et accueillant pour tous.
    
    **4**. *Publicit√© limit√©e* : Nous permettons la publicit√© limit√©e pour les r√©seaux sociaux des membres sur notre serveur. Si vous souhaitez partager vos r√©seaux sociaux avec les autres membres, veuillez utiliser le canal <#990913515218927656> d√©di√© √† cet effet. Pour toute autre publicit√©, veuillez demander l'autorisation au staff avant de poster. La publicit√© non autoris√©e est strictement interdite et peut entra√Æner des sanctions, y compris l'avertissement, la suppression de messages ou l'expulsion du serveur. Veuillez noter que nous demandons √† nos membres de ne pas abuser de cette possibilit√©.
    
    **5**. *Utilisez les canaux appropri√©s* : Notre serveur dispose de plusieurs canaux d√©di√©s √† diff√©rents sujets. Veuillez utiliser le canal appropri√© pour vos discussions. Par exemple, utilisez le canal <#987829603462709278> pour discuter de vos routines d'entra√Ænement et le canal <#991696422745428018> pour discuter de votre alimentation. Cela permettra √† tout le monde de trouver facilement les informations qu'il cherche.
    
    **6**. *Suivez les instructions des administrateurs* : Les administrateurs sont l√† pour assurer le bon fonctionnement du serveur et maintenir une ambiance agr√©able. Si un administrateur vous demande de cesser un comportement ou de suivre une r√®gle sp√©cifique, veuillez suivre ses instructions. Les administrateurs ont le bien-√™tre de la communaut√© √† c≈ìur et travaillent dur pour maintenir un environnement agr√©able pour tous.
    
    **7**. *Signalez tout comportement inappropri√©* : Si vous √™tes t√©moin d'un comportement inappropri√© sur notre serveur, veuillez le signaler aux administrateurs imm√©diatement. Nous prendrons les mesures n√©cessaires pour r√©soudre la situation. Nous comptons sur nos membres pour nous aider √† maintenir un environnement s√ªr et respectueux pour tous.
    
    Les administrateurs se r√©servent le droit de prendre des mesures en cas de non-respect de ces r√®gles, y compris l'avertissement, la suppression de messages ou l'expulsion du serveur.
    
    Nous esp√©rons que ces r√®gles vous aideront √† passer un bon moment sur notre serveur et √† profiter pleinement de notre communaut√©. Si vous avez des questions ou des pr√©occupations, n'h√©sitez pas √† contacter un administrateur.
    
    Merci de votre compr√©hension et bonne musculation ! üí™`)
    .setFooter("Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.", "https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png")
    .setImage("https://cdn.discordapp.com/attachments/987820203016618015/1098330144336261140/REGLEMENT.gif");

    const button = new MessageButton()
      .setCustomId('accept')
      .setLabel("J'ai lu et j'accepte")
      .setStyle('SUCCESS');

    const row = new MessageActionRow().addComponents(button);

    await message.channel.send({ embeds: [embed], components: [row] });
  }
});

client.on('interactionCreate', async interaction => {
  if (interaction.isButton() && interaction.customId === 'accept') {
    const role = interaction.guild.roles.cache.get('1098325166238478417');
    await interaction.member.roles.add(role);
    await interaction.reply({ content: 'Vous avez bien lu et accept√© le r√®glement.', ephemeral: true });

  }
});



//        ooooooooo.     .oooooo.   ooooo        oooooooooooo   .oooooo.      ooooo     ooo ooooo        .o   .oo.     o.   
//        `888   `Y88.  d8P'  `Y8b  `888'        `888'     `8  d8P'  `Y8b     `888'     `8' `888'       .8' .88' `8.   `8.  
//         888   .d88' 888      888  888          888         888      888     888       8   888       .8'  88.  .8'    `8. 
//         888ooo88P'  888      888  888          888oooo8    888      888     888       8   888       88   `88.8P       88 
//         888`88b.    888      888  888          888    "    888      888     888       8   888       88    d888[.8'    88 
//         888  `88b.  `88b    d88'  888       o  888       o `88b    d88b     `88.    .8'   888       `8.  88' `88.    .8' 
//        o888o  o888o  `Y8bood8P'  o888ooooood8 o888ooooood8  `Y8bood8P'Ybd'    `YbodP'    o888o       `8. `bodP'`88. .8'  



client.on('messageCreate', async message => {
  if (!message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'quirole') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    if (!args[0]) return message.reply('Veuillez mentionner un r√¥le.');
    const role = message.mentions.roles.first();
    if (!role) return message.reply('R√¥le non valide.');

    const membersWithRole = role.members.map(member => member.toString()).join('\n');
    const embed = new MessageEmbed()
      .setColor('GREEN')
      .setTitle(`Membres avec le r√¥le ${role.name}`)
      .setDescription(membersWithRole);

    await message.channel.send({ embeds: [embed] });
  }
});


client.on('messageCreate', async message => {
  if (!message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'quirole&') {
    if (!message.member.roles.cache.has(requiredEmployedRoleId)) {
      return message.reply("D√©sol√©, cette commande est r√©serv√©e aux employ√©s.");
    }

    if (args.length < 2) return message.reply('Veuillez mentionner deux r√¥les.');
    const roles = message.mentions.roles;
    if (roles.size < 2) return message.reply('R√¥les non valides.');

    const membersWithRoles = roles.first().members.filter(member => member.roles.cache.has(roles.last().id)).map(member => member.toString()).join('\n');
    const embed = new MessageEmbed()
      .setColor('GREEN')
      .setTitle(`Membres avec les r√¥les ${roles.first().name} et ${roles.last().name}`)
      .setDescription(membersWithRoles);

    await message.channel.send({ embeds: [embed] });
  }
});



client.on('messageCreate', async message => {
  if (message.content === 'autrespays') {
    const embed = new Discord.MessageEmbed()
      .setTitle('üó∫Ô∏è Choisis ton pays gr√¢ce au menu ci-dessous üó∫Ô∏è')
      .setColor('#8700C0')
      .setImage('https://cdn.discordapp.com/attachments/987820203016618015/1098583165376942120/AUTRES_PAYS.gif')
      .setFooter("Au nom de l'√©quipe ùê∫ùëÇùëÄùëàùëÜùê∂ùëà.", "https://cdn.discordapp.com/attachments/987820203016618015/1088231600854143077/gars_et_fille_body.png");

    const selectMenu = new MessageActionRow()
      .addComponents(
        new MessageSelectMenu()
          .setCustomId('select')
          .setPlaceholder('Choisis ton pays')
          .addOptions([
            {
              label: 'üá©üáø ‚îÉ Alg√©rie',
              value: '1098507604759687178',
            },
            {
              label: 'üá©üá™ ‚îÉ Allemagne',
              value: '1098502027216179210',
            },
            {
              label: 'üá¶üá© ‚îÉ Andorre',
              value: '1098505293178093569',
            },
            {
              label: 'üáßüá™ ‚îÉ Belgique',
              value: '1098501557651255316',
            },
            {
              label: 'üá®üá≤ ‚îÉ Cameroun',
              value: '1098507645213757511',
            },
            {
              label: 'üá®üá¶ ‚îÉ Canada',
              value: '1098501692716232775',
            },
            {
              label: 'üá®üáÆ ‚îÉ C√¥te d\'Ivoire',
              value: '1098505129642176572',
            },
            {
              label: 'üá®üá¨ ‚îÉ Congo',
              value: '1098510529733066792',
            },
            {
              label: 'üá™üá∏ ‚îÉ Espagne',
              value: '1098502097063911558',
            },
            {
              label: 'üá¨üá¶ ‚îÉ Gabon',
              value: '1098509400215388212',
            },
            {
              label: 'üá¨üá≥ ‚îÉ Guin√©e',
              value: '1098509431735595120',
            },
            {
              label: 'üá≠üáπ ‚îÉ Ha√Øti',
              value: '1098501829756727326',
            },
            {label: 'üáÆüáπ ‚îÉ Italie',
              value: '1098502054365892649',
            },
            {
              label: 'üá±üá∫ ‚îÉ Luxembourg',
              value: '1098501755156824086',
            },
            {
              label: 'üá≤üá¨ ‚îÉ Madagascar',
              value: '1098507710594564117',
            },
            {
              label: 'üá≤üá± ‚îÉ Mali',
              value: '1098507746925617204',
            },
            {
              label: 'üá≤üá¶ ‚îÉ Maroc',
              value: '1098505063112114186',
            },
            {
              label: 'üá≤üá∫ ‚îÉ Maurice',
              value: '1098507766483648512',
            },
            {
              label: 'üá≤üá® ‚îÉ Monaco',
              value: '1098501805882744933',
            },
            {
              label: 'üá≥üá® ‚îÉ Nouvelle Cal√©donie',
              value: '1098505221623255170',
            },
            {
              label: 'üáµüáπ ‚îÉ Portugal',
              value: '1098502266782240840',
            },
            {
              label: 'üá¨üáß ‚îÉ Royaume-Uni',
              value: '1098502362940846152',
            },
            {
              label: 'üá∏üá≥ ‚îÉ S√©n√©gal',
              value: '1098510605071155233',
            },
            {
              label: 'üá®üá≠ ‚îÉ Suisse',
              value: '1098501944735170631',
            },
            {
              label: 'üáπüá≥ ‚îÉ Tunisie',
              value: '1098501726325178429'
            }
          ])
      );

    const removeButton = new MessageActionRow()
      .addComponents(
        new MessageButton()
          .setCustomId('remove')
          .setLabel('Retirer tous les pays')
          .setStyle('DANGER')
      );

    await message.reply({ embeds: [embed], components: [selectMenu, removeButton] });
  }
});

client.on('interactionCreate', async interaction => {
  if (interaction.isSelectMenu()) {
    if (interaction.customId === 'select') {
      const role = interaction.guild.roles.cache.get(interaction.values[0]);
      await interaction.member.roles.add(role);
      await interaction.reply({ content: `R√¥le ${role.name} ajout√© avec succ√®s!`, ephemeral: true });
    }
  } else if (interaction.isButton()) {
    if (interaction.customId === 'remove') {
  const roles = [
    "1098507604759687178",
    "1098502027216179210",
    "1098505293178093569",
    "1098501557651255316",
    "1098507645213757511",
    "1098501692716232775",
    "1098505129642176572",
    "1098510529733066792",
    "1098502097063911558",
    "1098509400215388212",
    "1098509431735595120",
    "1098501829756727326",
    "1098502054365892649",
    "1098501755156824086",
    "1098507710594564117",
    "1098507746925617204",
    "1098505063112114186",
    "1098507766483648512",
    "1098501805882744933",
    "1098505221623255170",
    "1098502266782240840",
    "1098502362940846152",
    "1098510605071155233",
    "1098501944735170631",
    "1098501726325178429"
  ];
  for (const roleId of roles) {
    const role = interaction.guild.roles.cache.get(roleId);
    if (interaction.member.roles.cache.has(roleId)) {
      await interaction.member.roles.remove(role);
    }
  }
  await interaction.reply({ content: `Tous les r√¥les de pays ont √©t√© retir√©s avec succ√®s!`, ephemeral: true });
}
}
});












client.on('messageCreate', message => {
  if (message.content === 'vetements') {
      const embed = new Discord.MessageEmbed()
          .setTitle('V√™tement')
          .setDescription(`
<@&987826511295950889>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Abbl** ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚Üí¬†¬†¬†¬† *https://fr.beaybl.com/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Alphalete** ¬†¬†¬†‚Üí¬†¬†¬†¬† *https://alphaleteathletics.com/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Bulk** ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚Üí¬†¬†¬†¬† *https://www.bulk.com/fr/*
<@&987826511295950889>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Fabletics** ¬†¬†¬†¬†¬†‚Üí¬†¬†¬†¬†¬†¬† *https://www.fabletics.fr/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Gymshark** ¬†¬†¬†‚Üí¬†¬†¬†¬† *https://fr.gymshark.com/*
<@&987826511295950889>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Lululemon** ¬†¬†‚Üí¬†¬†¬†¬†¬†¬† *https://www.lululemon.fr/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**My Protein** ¬†‚Üí¬†¬†¬†¬† *https://fr.myprotein.com/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Prozis** ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚Üí¬†¬†¬†¬† *https://www.prozis.com/fr/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Shein** ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚Üí¬†¬†¬†¬† *https://fr.shein.com/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Yamamoto** ¬†¬†‚Üí¬†¬†¬†¬† *https://www.yamamotonutrition.com/fra/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Vanquish** ¬†¬†¬†¬†¬†‚Üí¬†¬†¬†¬† *https://www.vqfit.com/*
<@&987826511295950889> & <@&987826660130816020>¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†**Young LA** ¬†¬†¬†¬†‚Üí¬†¬†¬†¬† *https://www.youngla.com/*
`);
      message.channel.send({ embeds: [embed] });
  }
});



//              .o.       ooooo      ooo ooooooooooooo ooooo       .oooooo..o ooooooooo.         .o.       ooo        ooooo 
//             .888.      `888b.     `8' 8'   888   `8 `888'      d8P'    `Y8 `888   `Y88.      .888.      `88.       .888' 
//            .8"888.      8 `88b.    8       888       888       Y88bo.       888   .d88'     .8"888.      888b     d'888  
//           .8' `888.     8   `88b.  8       888       888        `"Y8888o.   888ooo88P'     .8' `888.     8 Y88. .P  888  
//          .88ooo8888.    8     `88b.8       888       888            `"Y88b  888           .88ooo8888.    8  `888'   888  
//         .8'     `888.   8       `888       888       888       oo     .d8P  888          .8'     `888.   8    Y     888  
//        o88o     o8888o o8o        `8      o888o     o888o      8""88888P'  o888o        o88o     o8888o o8o        o888o 



const SPAM_TIME_LIMIT = 5000;
const SPAM_MESSAGE_LIMIT = 5;
const spamData = {};

client.on('messageCreate', message => {
    if (message.author.bot) return;
    const authorId = message.author.id;
    if (!spamData[authorId]) {
        spamData[authorId] = {
            messageCount: 1,
            startTime: Date.now()
        };} else {
        spamData[authorId].messageCount++;
        if (Date.now() - spamData[authorId].startTime > SPAM_TIME_LIMIT) {
            spamData[authorId] = {
                messageCount: 1,
                startTime: Date.now()
            };
        } else if (spamData[authorId].messageCount > SPAM_MESSAGE_LIMIT) {
            message.channel.send(`${message.author}, veuillez arr√™ter de spammer.`);
        }
    }
});